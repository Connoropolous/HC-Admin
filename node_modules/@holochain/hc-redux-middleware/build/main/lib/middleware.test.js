"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const middleware_1 = require("./middleware");
const actionCreator_1 = require("./actionCreator");
const mockWebClient = (callResponse) => Promise.resolve({
    call: (callStr) => (params) => {
        return Promise.resolve(callResponse);
    },
    close: () => Promise.resolve('closed'),
    ws: null
});
const create = (callResponse) => {
    const store = {
        getState: sinon_1.default.spy(() => ({})),
        dispatch: sinon_1.default.spy()
    };
    const next = sinon_1.default.spy();
    const invoke = (action) => middleware_1.holochainMiddleware(mockWebClient(callResponse))(store)(next)(action);
    return { store, next, invoke };
};
ava_1.default('It passes non-holochain actions to the next reducer', async (t) => {
    let { next, invoke } = create('');
    const nonHolochainAction = { type: 'not-holochain-action' };
    await invoke(nonHolochainAction);
    t.true(next.calledWith(nonHolochainAction));
});
ava_1.default('It passes holochain actions and dispatches new action on success. Ok is unwrapped ', async (t) => {
    let { next, invoke, store } = create(JSON.stringify({ Ok: 'success' }));
    const holochainAction = actionCreator_1.createHolochainAsyncAction('happ', 'zome', 'capability', 'func');
    const result = await invoke(holochainAction.create({}));
    t.deepEqual(result, 'success');
    t.true(next.calledWith(holochainAction.create({})));
    t.true(store.dispatch.calledWith(holochainAction.success('success')));
});
ava_1.default('It passes holochain actions and dispatches new error action on holochain error. Err is unwrapped ', async (t) => {
    let { next, invoke, store } = create(JSON.stringify({ Err: 'fail' }));
    const holochainAction = actionCreator_1.createHolochainAsyncAction('happ', 'zome', 'capability', 'func');
    try {
        await invoke(holochainAction.create({}));
    }
    catch (result) {
        t.deepEqual(result, Error('fail'));
        t.true(next.calledWith(holochainAction.create({})));
        t.deepEqual(store.dispatch.lastCall.args[0], holochainAction.failure(Error('fail')));
    }
});
ava_1.default('It passes holochain actions and dispatches new action on success. Raw return is passed directly ', async (t) => {
    let { next, invoke, store } = create(JSON.stringify({ someField: 'success' }));
    const holochainAction = actionCreator_1.createHolochainAsyncAction('happ', 'zome', 'capability', 'func');
    const result = await invoke(holochainAction.create({}));
    t.deepEqual(result, { someField: 'success' });
    t.true(next.calledWith(holochainAction.create({})));
    t.true(store.dispatch.calledWith(holochainAction.success({ someField: 'success' })));
});
ava_1.default('can accept container admin style responses which return unstringified json objects', async (t) => {
    let { next, invoke, store } = create({ someField: 'success' });
    const holochainAction = actionCreator_1.createHolochainAsyncAction('admin', 'dna', 'list');
    const result = await invoke(holochainAction.create({}));
    t.deepEqual(result, { someField: 'success' });
    t.true(next.calledWith(holochainAction.create({})));
    t.true(store.dispatch.calledWith(holochainAction.success({ someField: 'success' })));
});
ava_1.default('can accept container admin style responses which return unstringified json arrays', async (t) => {
    let { next, invoke, store } = create(['item1', 'item2']);
    const holochainAction = actionCreator_1.createHolochainAsyncAction('admin', 'dna', 'list');
    const result = await invoke(holochainAction.create({}));
    t.deepEqual(result, ['item1', 'item2']);
    t.true(next.calledWith(holochainAction.create({})));
    t.true(store.dispatch.calledWith(holochainAction.success(['item1', 'item2'])));
});
ava_1.default('can accept container admin style responses which return plain strings which cannot be parsed to JSON', async (t) => {
    let { next, invoke, store } = create('test string');
    const holochainAction = actionCreator_1.createHolochainAsyncAction('admin', 'instance', 'list');
    const result = await invoke(holochainAction.create({}));
    t.deepEqual(result, 'test string');
    t.true(next.calledWith(holochainAction.create({})));
    t.true(store.dispatch.calledWith(holochainAction.success('test string')));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9taWRkbGV3YXJlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBc0I7QUFDdEIsa0RBQXlCO0FBRXpCLDZDQUFrRDtBQUNsRCxtREFBNEQ7QUFFNUQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxZQUFpQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzNELElBQUksRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtRQUN6QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUNELEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUN0QyxFQUFFLEVBQUUsSUFBSTtDQUNULENBQUMsQ0FBQTtBQUVGLE1BQU0sTUFBTSxHQUFHLENBQUMsWUFBaUIsRUFBRSxFQUFFO0lBQ25DLE1BQU0sS0FBSyxHQUFHO1FBQ1osUUFBUSxFQUFFLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixRQUFRLEVBQUUsZUFBSyxDQUFDLEdBQUcsRUFBRTtLQUN0QixDQUFBO0lBQ0QsTUFBTSxJQUFJLEdBQUcsZUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxnQ0FBbUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVyRyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQTtBQUNoQyxDQUFDLENBQUE7QUFFRCxhQUFJ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