"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactCopyToClipboard = _interopRequireDefault(require("react-copy-to-clipboard"));

var _prism = _interopRequireDefault(require("./prism"));

var _css = _interopRequireDefault(require("./css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var prismStyle = document.createElement('style');
prismStyle.innerHTML = _css.default;
document.body.appendChild(prismStyle);

var JSX =
/*#__PURE__*/
function (_Component) {
  _inherits(JSX, _Component);

  function JSX(props) {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, JSX);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(JSX)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    props.ob({
      next: function next(type) {
        return type === 'jsx' ? _this.onAddJSX.bind(_assertThisInitialized(_assertThisInitialized(_this))) : _this.setCurrent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      }
    });
    _this.state = {};

    _this.stopListeningOnStory = function () {
      return _this.setState({});
    };

    return _this;
  }

  _createClass(JSX, [{
    key: "setCurrent",
    value: function setCurrent(kind, story) {
      this.setState({
        current: {
          kind: kind,
          story: story
        }
      });
    }
  }, {
    key: "onAddJSX",
    value: function onAddJSX(kind, story, jsx) {
      var state = this.state;

      if (typeof state[kind] === 'undefined') {
        state[kind] = {};
      }

      state[kind][story] = jsx;
      this.setState(state);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.active && typeof this.state.current !== 'undefined' && typeof this.state[this.state.current.kind] !== 'undefined') {
        var current = this.state.current;
        var code = this.state[current.kind][current.story];
        var jsx = code ? _prism.default.highlight(code, _prism.default.languages.jsx) : '';
        return _react.default.createElement("div", {
          style: styles.container
        }, _react.default.createElement(_reactCopyToClipboard.default, {
          style: styles.btn,
          text: code ? code : ''
        }, _react.default.createElement("button", null, "Copy")), _react.default.createElement("pre", {
          style: styles.pre,
          dangerouslySetInnerHTML: {
            __html: jsx
          }
        }));
      } else {
        return _react.default.createElement("div", {
          style: styles.container
        }, _react.default.createElement(_reactCopyToClipboard.default, {
          style: styles.btn,
          text: "",
          disabled: true
        }, _react.default.createElement("button", null, "Copy")), _react.default.createElement("pre", {
          style: styles.pre
        }));
      }
    }
  }]);

  return JSX;
}(_react.Component);

exports.default = JSX;
var styles = {
  container: {
    flex: 1,
    padding: '10px',
    position: 'relative'
  },
  btn: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    border: 'none',
    borderTop: 'solid 1px rgba(0, 0, 0, 0.2)',
    borderLeft: 'solid 1px rgba(0, 0, 0, 0.2)',
    background: 'rgba(255, 255, 255, 0.5)',
    padding: '5px 10px',
    borderRadius: '4px 0 0 0',
    color: 'rgba(0, 0, 0, 0.5)',
    textTransform: 'uppercase',
    outline: 'none'
  },
  pre: {
    flex: 1
  }
};