"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _reactElementToJsxString = _interopRequireDefault(require("react-element-to-jsx-string"));

var _jsBeautify = require("js-beautify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var applyBeforeRender = function applyBeforeRender(domString, options) {
  if (typeof options.onBeforeRender !== 'function') {
    return domString;
  }

  return options.onBeforeRender(domString);
};

var renderJsx = function renderJsx(code, options) {
  for (var i = 0; i < options.skip; i++) {
    if (typeof code === 'undefined') {
      console.warn('Cannot skip undefined element');
      return;
    }

    if (_react.default.Children.count(code) > 1) {
      console.warn('Trying to skip an array of elements');
      return;
    }

    if (typeof code.props.children === 'undefined') {
      console.warn('Not enough children to skip elements.');
      if (typeof code.type === 'function' && code.type.name === '') code = code.type(code.props);
    } else {
      if (typeof code.props.children === 'function') {
        code = code.props.children();
      } else {
        code = code.props.children;
      }
    }
  }

  if (typeof code === 'undefined') return console.warn('Too many skip or undefined component');

  while (typeof code.type === 'function' && code.type.name === '') {
    code = code.type(code.props);
  }

  var ooo = typeof options.displayName === 'string' ? Object.assign({}, options, {
    showFunctions: true,
    displayName: function displayName() {
      return options.displayName;
    }
  }) : options;
  return _react.default.Children.map(code, function (c) {
    return applyBeforeRender((0, _reactElementToJsxString.default)(c, ooo), options);
  }).join('\n');
};

var _default = {
  addWithJSX: function addWithJSX(kind, storyFn) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var defaultOpts = {
      skip: 0,
      showFunctions: true,
      enableBeautify: true
    };
    var options = Object.assign({}, defaultOpts, opts);

    var channel = _addons.default.getChannel();

    var result = this.add(kind, function (context) {
      var story = storyFn(context);
      var jsx = '';

      if (story.template) {
        if (options.enableBeautify) {
          jsx = (0, _jsBeautify.html)(story.template, options);
        } else {
          jsx = story.template;
        }
      } else {
        jsx = renderJsx(story, options);
      }

      channel.emit('kadira/jsx/add_jsx', result.kind, kind, jsx);
      return story;
    });
    return result;
  }
};
exports.default = _default;